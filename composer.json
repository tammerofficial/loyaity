{
    "$schema": "https://getcomposer.org/schema.json",
    "name": "laravel/laravel",
    "type": "project",
    "description": "The skeleton application for the Laravel framework.",
    "keywords": [
        "laravel",
        "framework"
    ],
    "license": "MIT",
    "require": {
        "php": "^8.2",
        "chiiya/laravel-passes": "^1.1",
        "endroid/qr-code": "^6.0",
        "laravel/framework": "^12.0",
        "laravel/sanctum": "^4.2",
        "laravel/tinker": "^2.10.1",
        "phpunit/php-code-coverage": "^11.0"
    },
    "require-dev": {
        "fakerphp/faker": "^1.23",
        "laravel/pail": "^1.2.2",
        "laravel/pint": "^1.13",
        "laravel/sail": "^1.41",
        "mockery/mockery": "^1.6",
        "nunomaduro/collision": "^8.6",
        "phpunit/phpunit": "^11.5.3"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force",
            "@php artisan migrate --force",
            "@php artisan config:cache",
            "@php artisan route:cache",
            "@php artisan view:cache",
            "@php -r \"if (DIRECTORY_SEPARATOR === '/') { exec('chmod -R 755 storage'); exec('chmod -R 755 bootstrap/cache'); echo 'Permissions updated\\n'; }\"",
            "echo 'Laravel update completed successfully! âœ…'"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi",
            "@php -r \"file_exists('database/database.sqlite') || touch('database/database.sqlite');\"",
            "@php artisan migrate --graceful --ansi"
        ],
        "dev": [
            "Composer\\Config::disableProcessTimeout",
            "npx concurrently -c \"#93c5fd,#c4b5fd,#fb7185,#fdba74\" \"php artisan serve\" \"php artisan queue:listen --tries=1\" \"php artisan pail --timeout=0\" \"npm run dev\" --names=server,queue,logs,vite"
        ],
        "test": [
            "@php artisan config:clear --ansi",
            "@php artisan test"
        ],
        "post-install-cmd": [
            "@php -r \"if (!file_exists('.env')) { copy('.env.example', '.env'); echo '.env file created from .env.example\\n'; }\"",
            "@php artisan key:generate --ansi --force",
            "@php -r \"if (!is_dir('storage/logs')) { mkdir('storage/logs', 0755, true); echo 'Created storage/logs directory\\n'; }\"",
            "@php -r \"if (!is_dir('bootstrap/cache')) { mkdir('bootstrap/cache', 0755, true); echo 'Created bootstrap/cache directory\\n'; }\"",
            "@php -r \"if (DIRECTORY_SEPARATOR === '/') { exec('chmod -R 755 storage'); exec('chmod -R 755 bootstrap/cache'); echo 'Permissions set for Unix/Linux\\n'; } else { echo 'Windows detected - permissions not set\\n'; }\"",
            "@php artisan storage:link",
            "@php artisan config:cache",
            "@php artisan route:cache",
            "@php artisan view:cache",
            "echo 'Laravel auto-installation completed successfully! ðŸŽ‰'"
        ],
        "deploy": [
            "@php artisan down --retry=60",
            "@php artisan config:clear",
            "@php artisan cache:clear",
            "@php artisan route:clear",
            "@php artisan view:clear",
            "@php artisan migrate --force",
            "@php artisan config:cache",
            "@php artisan route:cache",
            "@php artisan view:cache",
            "@php artisan up",
            "echo 'Deployment completed! ðŸš€'"
        ],
        "fresh": [
            "@php artisan migrate:fresh --seed",
            "@php artisan config:cache",
            "@php artisan route:cache",
            "@php artisan view:cache",
            "echo 'Fresh installation with seed data completed! ðŸŒ±'"
        ],
        "optimize": [
            "@php artisan config:cache",
            "@php artisan route:cache",
            "@php artisan view:cache",
            "@php artisan storage:link",
            "echo 'Application optimized! âš¡'"
        ],
        "clear-all": [
            "@php artisan config:clear",
            "@php artisan cache:clear",
            "@php artisan route:clear",
            "@php artisan view:clear",
            "@php artisan queue:clear",
            "echo 'All caches cleared! ðŸ§¹'"
        ],
        "install-fresh": [
            "Composer\\Config::disableProcessTimeout",
            "@clear-all",
            "@post-install-cmd",
            "@fresh"
        ],
        "install-production": [
            "Composer\\Config::disableProcessTimeout",
            "@post-install-cmd",
            "@php artisan migrate --force",
            "@optimize"
        ]
    },
    "extra": {
        "laravel": {
            "dont-discover": []
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "php-http/discovery": true
        }
    },
    "minimum-stability": "stable",
    "prefer-stable": true
}